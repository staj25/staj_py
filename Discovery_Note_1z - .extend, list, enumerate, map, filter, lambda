## LAMBDA fxn - fxnality that you intend to use once
## lambda variable: variable operations/calculations
## NOTE - NOT EVERY FXN will be possibly transformed into a lambda expression

#EXAMPLE 1
def ftn(w):
    return lambda x: x * w * 2

phase1 = ftn(10)
phase1(0.65)

#EXAMPLE 2 - CAN BE USED IN CONJUNCTION WITH OTHER FXNS & SHORTENS CODE i.e. replacing the fxn code lines
#CONSIDER THE MAP filter EXAMPLE BELOW, there was no need to create the myfunc fxn!!!

my_nums = [10,2,31,4,15]
answer = list(map(lambda r:r < 18,my_nums))
print(answer)
#output [True, True, False, True, True]

#MAP EXAMPLE - check even lambda test
my_nums = [10,2,31,4,15]
f1 = list(filter(lambda eve: eve%2 == 0,my_nums)) 
print(f1)
#output [10, 2, 4]

#ANOTHER EXAMPLE
names = ['One', 'Two','zwei']
list(map(lambda n: n[0],names))
#output - ['O', 'T', 'z']



## FILTER fxn - filters true an iterable, selecting elements of the iterable based on True conditions specified
## filter(fxn, iterables)

ages = [5, 12, 17, 18, 24, 32]

def myFunc(x):
  return x < 18 

kids = list(filter(myFunc, ages))  
print(kids)    


#OR INSTEAD OF PUTTING THE RESULTS IN A LIST YOU CAN RUN THEM THROUGH SOMETHING ELSE SPECIFIED IN A FOR LOOP e.g.

for n in filter(myFunc, ages):
    print(n)




## MAPS fxn - ensures that each element of iterable is ran through a fxn/module
## usually requires for statment unless wrapped within a fxn e.g. list( map(fxn/module,iterable)
## map(fxn/module,iterable)

my_nums = [1,2,3,4,5]
who = list( map(float,my_nums))
print(who)

#OR INSTEAD OF PUTTING THE RESULTS IN A LIST YOU CAN RUN THEM THROUGH SOMETHING ELSE SPECIFIED IN A FOR LOOP e.g.

for n in map(float,my_nums):
    print(n)
    
    
    
    


## convert various list elemtents into a single list element - .join()
## only used for strings, use sum() for same results but with numbers
## https://www.tutorialspoint.com/python/string_join.htm
h = [a for a in 'history']
#above creates ['h', 'i', 's', 't', 'o', 'r', 'y']
print(h)
print('\n')
ans = ''.join(h)
#above joins elements of h
z = []
z.append(ans)
print(z)
#output - ['history']



## extend method .extend - https://stackoverflow.com/questions/252703/difference-between-append-vs-extend-list-methods-in-python
ball = [2,'keys','player',3]
ball.extend([55])
#output - [2, 'keys', 'player', 3, 55]

## you can use math operator (* & +) with iterables to duplicate them
#output - gives you 5 items named 'wow' in the list f
f=['wow']
#output - gives extra items of the value of f in the list
g=f+f
print(g)

## "variable" in list BOOLEAN
## this produces a boolean result
## https://www.programiz.com/python-programming/list

my_list = ['p','r','o','b','l','e','m']

# Output: True
print('p' in my_list)

# Output: False
print('a' in my_list)

# Output: True
print('c' not in my_list)








## list function - list() - Convert an iterable (tuple, string, set, dictionary) to a list. FINALLY - EUREKA !!!
## to find sum of elements of a tuple and convert it to a list, convert it to a list first and find the sum e.g.

why = (1,23,3)
sum(list(why))



#Trying hard to have the  elements of the list individually
#printed as their own seperate list
#EUREKA!! Simply adding [] to the result of the for loop and making it a variable worked!!!!

#lao = []
xao = [k for k in p.split()  if len(k) > 3 ]
for au in xao:
    zeze = [au]
    #lao.append(au)
    print(zeze)
    
#ENUMERATE FUNCTION
#...  , 100)  specifies the starting index numbher
for a, b in enumerate(elements,100):
#   kite = {a:b} ---- this creates a dictionary from the output instead of a list like below !!!
    kite = [a,b]
    print(kite)




#### NOTE - METHOD vs FUNCTION #### https://developers.google.com/edu/python/lists
# EXAMPLE - Notice that these are *methods* on a list object, 
#  while len() is a function that takes the list (or string or whatever) as an argument.

#Common error: note that the BELOW methods do not *return* the modified list, they just modify the original list.
#THE BELOW WON'T WORK !!!

list = ['larry', 'curly', 'moe']
print('result of wrong attempt')
print(list.append('shemp'))         ## append elem at end
print('\n')
#correction below


list.append('shemp')
print('correct syntax')
print(list)



### Generate random numbers --- random.randint(1,101) -- random numbers btw 1 & 100
import random
for x in range(10):
  print(random.randint(1,101))

