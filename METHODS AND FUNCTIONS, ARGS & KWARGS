#METHODS
#how to discover methods - shift + tab in jupyter notebook
#discover more methods using the python official doc - library reference -- https://docs.python.org/3/library/index.html



mylist = [1,2,3]

#help(variable.method)   --  this returns object documentation for specific method
help(mylist.insert)
print('\n')

#help(variable.method)   --  this returns object documentation list
help(mylist)

print('\n')



##FUNCTIONS -- creating/running code without repititive calling 
def add_fxn(num1,num2):
    return num1+num2

result = add_fxn(3,6)
print(result)
print('\n')

#Below shows how to add DOCSTRING to the fxn so the help() fxn can display it
#add '''  in order to add docstring entries
def name_fxn():
    '''
    DOCSTRING: This is info about the fxn
    INPUT: n/a
    OUTPUT: Hello
    '''
    print('Hello')
    
name_fxn()

print('\n')

help(name_fxn)

print('\n')


#adding default parameters to fxns
#running say_hello()  as is without any parameters within () will lead to an error
#you can avoid this by adding a default name

#def say_hello(name):
#    print('hello ' +name)

def say_hello(name='NAME'):
    print('hello ' +name)

say_hello('Mimi')
say_hello()

print('\n')


#NOTE -- the print command in the fxn is only printing out and not returning values that can be
#put in to variables e.g. a = say_hello()  will not print out any value for a
#you need to use the "return" command


def say_hello(name='NAME'):
    return 'hello ' +name

result = say_hello('Mimiko Name')
print(result)

print('\n')


#NOTE -- the return command doesn't auto print the results of the function 
#Running the code without the print function will not output the results

def myfunc(a):
    print ("Enter 'True' or 'False' as is and any other answer in single quotes")
    if a == True:
        return 'Inside'
    elif a == False:
        return 'Outside'
    else:
        return 'Your Input was Neither True nor False'
         

print( myfunc('Falsejg') )



######   ARGS & KWARGS    ########
## NOTE - anything can be used in place of the word "args" as long as "*" is there
def myfunc(*args):
   for item in args:
    print(item)
    continue

myfunc(10,120,100, 4545,4,454,54,4,54)
    
#kwargs example    
def myfunc(**kwargs):
    print(kwargs)
    if 'fruit' in kwargs:
        print('My fruit is {}'.format(kwargs['fruit']) )
        #Note if you use the other NEWer print formatting method, you can use indexing as above
        #https://www.digitalocean.com/community/tutorials/how-to-use-string-formatters-in-python-3
    else:
        print('NO FRUITS HERE')

myfunc(fruit='apple')



#another kwargs example
# *** NOTE  *** - not sure how to do the print formatting line in a similar way using the new print formatting method
# the argument has to be in the order as specified in the first line i.e. tuple entered first then dictionary values

def myfxn(*args,**kwargs):
    print('I would like {} {}'.format(args[0],kwargs['food']) )

myfxn(10,20,30,fruit='orange',food='eggs',animal='dog')


# *** NOTE - len(args) can be used to count the number of entred arguments
def myf(*args):
    return len(args)
