##this does string interpolation instead of doing the print('string1' + 'string2') method


print('This is a string {}'.format('INSERTED'))


print('The {} {} {}'.format('fox','brown','quick'))


print('The {2} {1} {0}'.format('fox','brown','quick'))

##The above uses indexing i.e. 0 1 2 etc.


print('The {q:19} {b} {f}'.format(f='fox',b='brown',q='quick'))

##The above uses variable-like assignments {q:19} specifies the value of q and whitespace


result = 100/777

result

print("The result was {}".format(result))


print("The result was {r}".format(r=result))

##The above shows examples of float formatting with the .format() function

##Floating formatting - "{value:width.precision f}"

##width - whitespace before value display/position, precision - decimal points


print("The result was >> {r:19.4f}".format(r=result))
#Below is the other/newer fstring method. .format method includes the variable specification on the same line of code instead of pre-creating it in a previous line.


name = "Jose"

print(f'Hello, his name is {name}')


name = "Sam"
age = 3.0

print(f'{name} is {age:1.4f} years old.')

print('Python{}'.format(' rules!'))

r = 'rules!'

print(f'Python {r}')


type(result)


print(name.isupper())


print(name.upper().isupper())

#Example above shows how you can use multiple functions i.e. the result of the 1st function is the entered in to the 2nd fxn. Below: shows how to convert a number into a string so you can concatenate with another string!


my_num=5

print( str(my_num) + " my fav num")

#note: int() & float() converts string numbers (numbers entered as strings e.g. below, as inputs are seen by python as strings) into numbers


f = input()


type(f)


g=int(f)

type(g)
