#useful operators

#range generates numbers 0-9 not including 10

for num in range(10):
    print(num)

print('\n')

#range(6,10) counts from 6-9
#range(0,10,2) counts from 0 to 9 with a step size of 2 i.e. all even numbers


for num in range(0,10,2):
    print(num)
    
print('\n')

#you can have the range results converted into a list

a = list(range(0,10,2))
print(a)

print('\n')

#enumerate
 
index_count = 0

for letter in 'abcde':
    print('At index {} the letter is {}'.format(index_count,letter))
    #.format identifies 2 vars 
    #py3 print format system --  print(f'At index {index_count} the letter is {letter}')
    index_count += 1


print('\n')


##below - print the string alphabet of a certain index number

index_ct = 0    
word = 'abcde'

for letter in word:
    print(word[index_ct])
    index_ct += 1

print('\n')


#instead of the above the enumerate fxn as described below was built
#it produces a tuple output
#enumerate -- (iterable, start=0) i.e. by default the counter starts at 0
#Greate example -- http://book.pythontips.com/en/latest/enumerate.html

word = 'abcde'

for item in enumerate(word):
    #for x,y then print(x,y) gives you the output as index, value
    #(word,1) starts the counter at 1
    print(item)

print('\n')

#below -- does it without a for loop !!! wow!!!
counter_list = list(enumerate(word, 1))
print(counter_list)

print('\n')


#zip operator
#it pairs up & combines separate data/values and outputs a tuple
# ** note ** - shortest list is used as ref when lists are uneven


mylist1 = [1,2,3]
mylist2 = ['a','b','c']
mylist3 = ['toronto','lagos','rio']

for item in zip(mylist1,mylist2,mylist3):
    print(item)

print('\n')

#below -- convert output into a list
print(list(zip(mylist1,mylist2)))

print('\n')

#tuple unpacking test plus zip test -- print(b) picks the middle value of the newly created zip lists
for a,b,c in zip(mylist1,mylist2,mylist3):
    print(b)
    
print('\n')

#in operator - works on iterable obj types    - check if obj is in a list - returns boolean output True / False

y = 'x' in [1,2,3]
print(y)

print('\n')

r = '2' in ['2','y','z']
print(r)

print('\n')

mk = 'mykey' in {'mykey':345}
print(mk)

print('\n')

# **** NOTE **** The fxns used so far & below are all part of Built-in Libraries - Importing Libs topic below

#in - con't - below checks for the item in the dictionary's value or entire item
d = {'mykey':345}
va = 345 in d.values()
print('values')
print(va)

print('\n')

ky = 345 in d.keys()
print('keys')
print(ky)

print('\n')

it = 345 in d.items()
print('items')
print(it)

print('\n')

#min / max operator
alist = [10,20,30,40,100]
minimum = min(alist)
print('minimum')
print(minimum)

print('\n')


maximum = max(alist)
print('maximum')
print(maximum)

print('\n')

#Importing fxns from Libs -- hit tab using jupyter after line below to list the fxns available in this "random" lib
#The 1st line imports the shuffle fxn from the "random" library
#The print output shows the new list's values as being randomized
from random import shuffle
rlist = [1,2,3,4,5]
shuffle(rlist)
print(rlist)

#not sure I wasn't able to have the output of the shuffle fxn put into a variable -- newlist = shuffle(rlist)
#video says it doesn't actually return anything
#It is an "in place" fxn that operates in place on the list!!!

print('\n')

#below imports the randint fxn -- (0,100) are the starting and ending numbers from which the random number will be selected
from random import randint 
u = randint(0,100)
print(u)



















